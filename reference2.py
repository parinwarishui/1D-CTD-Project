# generated by chatgpt
# can use as reference, but it does not work...


import tkinter as tk
from turtle import RawTurtle, ScrolledCanvas
import random
import time

# Create the main game class
class LanguageGame:
    def __init__(self, root):
        self.root = root
        self.root.title("Language Turtle Game")
        self.lives = 3
        self.score = 0
        self.question_number = 1
        self.max_questions = 10
        self.timer = 10

        # Initialize tkinter and turtle canvas
        self.canvas = ScrolledCanvas(root, width=600, height=600)
        self.canvas.pack()
        self.turtle_screen = RawTurtle(self.canvas)
        self.turtle_screen.speed(0)
        self.turtle_screen.hideturtle()

        self.player = RawTurtle(self.canvas)
        self.player.shape("turtle")
        self.player.penup()
        self.player.goto(0, -200)

        self.choice_positions = [(-200, 200), (0, 200), (200, 200)]
        self.choices = []
        self.correct_choice_index = None

        self.start_time = time.time()

        # Display controls and start game
        self.create_ui()
        self.root.bind("<Key>", self.move_player)
        self.next_question()

    def create_ui(self):
        self.status_label = tk.Label(self.root, text=f"Lives: {self.lives} | Score: {self.score}", font=("Arial", 14))
        self.status_label.pack()
        self.timer_label = tk.Label(self.root, text=f"Time Left: {self.timer}", font=("Arial", 14))
        self.timer_label.pack()

    def update_ui(self):
        self.status_label.config(text=f"Lives: {self.lives} | Score: {self.score}")
        self.timer_label.config(text=f"Time Left: {max(0, int(self.timer))}")

    def move_player(self, event):
        if event.keysym == "w":
            self.player.sety(self.player.ycor() + 20)
        elif event.keysym == "s":
            self.player.sety(self.player.ycor() - 20)
        elif event.keysym == "a":
            self.player.setx(self.player.xcor() - 20)
        elif event.keysym == "d":
            self.player.setx(self.player.xcor() + 20)

        self.check_answer()

    def generate_question(self):
        question = f"What is the word for '{random.choice(['Apple', 'House', 'Car'])}' in French?"
        choices = ["Pomme", "Maison", "Voiture"]
        correct_answer = random.choice(choices)
        return question, choices, choices.index(correct_answer)

    def display_question_and_choices(self, question, choices):
        self.turtle_screen.clear()
        self.turtle_screen.write(question, align="center", font=("Arial", 16, "bold"))
        self.choices = []
        for i, position in enumerate(self.choice_positions):
            choice_turtle = RawTurtle(self.canvas)
            choice_turtle.penup()
            choice_turtle.hideturtle()
            choice_turtle.goto(position)
            choice_turtle.write(choices[i], align="center", font=("Arial", 12))
            self.choices.append((choice_turtle, position))

    def check_answer(self):
        for i, (_, pos) in enumerate(self.choices):
            if abs(self.player.xcor() - pos[0]) < 20 and abs(self.player.ycor() - pos[1]) < 20:
                if i == self.correct_choice_index:
                    self.score += 1
                    self.next_question()
                else:
                    self.lives -= 1
                    if self.lives > 0:
                        self.next_question()
                    else:
                        self.end_game("lose")

    def next_question(self):
        if self.question_number > self.max_questions:
            self.end_game("win")
            return

        question, choices, correct_index = self.generate_question()
        self.correct_choice_index = correct_index
        self.display_question_and_choices(question, choices)
        self.player.goto(0, -200)
        self.question_number += 1
        self.start_time = time.time()
        self.update_ui()
        self.timer_loop()

    def timer_loop(self):
        self.timer = 10 - (time.time() - self.start_time)
        self.update_ui()

        if self.timer <= 0:
            self.lives -= 1
            if self.lives > 0:
                self.next_question()
            else:
                self.end_game("lose")
        else:
            self.root.after(100, self.timer_loop)

    def end_game(self, result):
        self.turtle_screen.clear()
        if result == "win":
            message = "You Won! Congratulations!"
        else:
            message = "Game Over! Better luck next time!"
        self.turtle_screen.write(message, align="center", font=("Arial", 20, "bold"))

# Run the game
if __name__ == "__main__":
    root = tk.Tk()
    game = LanguageGame(root)
    root.mainloop()
